bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: robot3/base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.10
      yaw_goal_tolerance: 0.10
      stateful: True
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5
      lookahead_dist: 0.25
      min_lookahead_dist: 0.1
      max_lookahead_dist: 0.5
      lookahead_time: 0.8
      rotate_to_heading_angular_vel: 0.1
      transform_tolerance: 0.2
      use_velocity_scaled_lookahead_dist: false
      min_approach_linear_velocity: 0.05
      approach_velocity_scaling_dist: 0.6
      use_collision_detection: False
      max_allowed_time_to_collision_up_to_carrot: 3.0
      use_regulated_linear_velocity_scaling: true
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 0.25
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.9
      regulated_linear_scaling_min_speed: 0.25
      use_rotate_to_heading: true
      allow_reversing: false
      rotate_to_heading_min_angle: 0.785
      max_angular_accel: 0.1
      max_robot_pose_search_dist: 10.0
      use_interpolation: true

# controller_server:
#   ros__parameters:
#     # controller server parameters (see Controller Server for more info)
#     use_sim_time: True
#     controller_frequency: 20.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
#     goal_checker_plugins: ["goal_checker"]
#     controller_plugins: ["FollowPath"]
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.25
#       yaw_goal_tolerance: 0.25
#       stateful: True
#     # DWB controller parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: 0.0
#       min_vel_y: 0.0
#       max_vel_x: 0.26
#       max_vel_y: 0.0
#       max_vel_theta: 1.0
#       min_speed_xy: 0.0
#       max_speed_xy: 0.26
#       min_speed_theta: 0.0
#       acc_lim_x: 2.5
#       acc_lim_y: 0.0
#       acc_lim_theta: 3.2
#       decel_lim_x: -2.5
#       decel_lim_y: 0.0
#       decel_lim_theta: -3.2
#       vx_samples: 20
#       vy_samples: 5
#       vtheta_samples: 20
#       sim_time: 1.7
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.25
#       trans_stopped_velocity: 0.25
#       short_circuit_trajectory_evaluation: True
#       limit_vel_cmd_in_traj: False
#       stateful: True
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 0.2
#       PathAlign.scale: 32.0
#       GoalAlign.scale: 24.0
#       PathAlign.forward_point_distance: 0.1
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 32.0
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 32.0
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0

# controller_server:
#   ros__parameters:
#     odom_topic: "/odom"
#     use_sim_time: True
#     controller_frequency: 5.0
#     controller_plugin_types: ["teb_local_planner::TebLocalPlannerROS"]
#     controller_plugins: ["FollowPath"]
#     FollowPath:
#       plugin: teb_local_planner::TebLocalPlannerROS

#       teb_autosize: 1.0
#       dt_ref: 0.3
#       dt_hysteresis: 0.1
#       max_samples: 500
#       global_plan_overwrite_orientation: True
#       allow_init_with_backwards_motion: False
#       max_global_plan_lookahead_dist: 3.0
#       global_plan_viapoint_sep: 0.3
#       global_plan_prune_distance: 1.0
#       exact_arc_length: False
#       feasibility_check_no_poses: 2
#       publish_feedback: False
          
#       # Robot
              
#       max_vel_x: 0.3
#       max_vel_theta: 0.5
#       acc_lim_x: 1.0
#       acc_lim_theta: 1.5

#       footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
#         type: "circular"
#         radius: 0.17 # for type "circular"

#       # GoalTolerance
              
#       free_goal_vel: False
          
#       # Obstacles
          
#       min_obstacle_dist: 0.2
#       inflation_dist: 0.05
#       include_costmap_obstacles: True
#       costmap_obstacles_behind_robot_dist: 0.05
#       obstacle_poses_affected: 15

#       dynamic_obstacle_inflation_dist: 0.10
#       include_dynamic_obstacles: True 

#       costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
#       costmap_converter_spin_thread: True
#       costmap_converter_rate: 5

#       # Optimization
          
#       no_inner_iterations: 5
#       no_outer_iterations: 4
#       optimization_activate: True
#       optimization_verbose: False
#       penalty_epsilon: 0.1
#       obstacle_cost_exponent: 4.0
#       weight_max_vel_x: 0.5
#       weight_max_vel_theta: 0.5
#       weight_acc_lim_x: 0.5
#       weight_acc_lim_theta: 10.5
#       weight_kinematics_nh: 1000.0
#       weight_kinematics_forward_drive: 3.0
#       weight_kinematics_turning_radius: 1.0
#       weight_optimaltime: 2.0 # must be > 0
#       weight_shortest_path: 1.0
#       weight_obstacle: 50.0
#       weight_inflation: 0.2
#       weight_dynamic_obstacle: 10.0 # not in use yet
#       weight_dynamic_obstacle_inflation: 0.2
#       weight_viapoint: 5.0
#       weight_adapt_factor: 2.0

#       # Homotopy Class Planner

#       enable_homotopy_class_planning: False
#       enable_multithreading: True
#       max_number_classes: 4
#       selection_cost_hysteresis: 5.0
#       selection_prefer_initial_plan: 1.0
#       selection_obst_cost_scale: 1.0
#       selection_alternative_time_cost: True

#       roadmap_graph_no_samples: 15
#       roadmap_graph_area_width: 5.0
#       roadmap_graph_area_length_scale: 1.0
#       h_signature_prescaler: 0.5
#       h_signature_threshold: 0.1
#       obstacle_heading_threshold: 0.45
#       switching_blocking_period: 0.0
#       viapoints_all_candidates: True
#       delete_detours_backwards: True
#       max_ratio_detours_duration_best_duration: 3.0
#       visualize_hc_graph: False
#       visualize_with_time_as_z_axis_scale: 0.0

#       # Recovery
      
#       shrink_horizon_backup: True
#       shrink_horizon_min_duration: 10.0
#       oscillation_recovery: True
#       oscillation_v_eps: 0.1
#       oscillation_omega_eps: 0.1
#       oscillation_recovery_min_duration: 10.0
#       oscillation_filter_duration: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: robot3/base_link
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      #robot_radius: 0.22
      footprint: '[[0.05, 0.06], [0.05, -0.06], [-0.05, -0.06], [-0.05, 0.06]]'
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 10.0
        inflation_radius: 0.01
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: robot3/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 1.0
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      footprint_padding: 0.03
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: robot3/base_link
      #robot_radius: 0.22
      footprint: '[[0.05, 0.06], [0.05, -0.06], [-0.05, -0.06], [-0.05, 0.06]]'
      resolution: 0.05
      track_unknown_space: false
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: robot3/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 0.0
        inflation_radius: 0.06
      always_send_full_costmap: True


# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    GridBased:
      # plugin: "nav2_navfn_planner::NavfnPlanner"
      # tolerance: 0.5
      # use_astar: false
      # allow_unknown: true
      # plugin: "nav2_theta_star_planner::ThetaStarPlanner" # In Iron and older versions, "/" was used instead of "::"
      # how_many_corners: 16
      # w_euc_cost: 0.7
      # w_traversal_cost: 4.0
      # w_heuristic_cost: 1.0
      plugin: "nav2_smac_planner::SmacPlanner2D" # In Iron and older versions, "/" was used instead of "::"
      tolerance: 0.3                     # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false             # whether or not to downsample the map
      downsampling_factor: 2                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true                   # allow traveling in unknown space
      max_iterations: 1000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
      max_planning_time: 2.0                # max time in s for planner to plan, smooth
      cost_travel_multiplier: 50.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      #angle_quantization_bins: 4
      smoother:
        max_iterations: 0
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10

smoother_server:
  ros__parameters:
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: robot3/base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    base_frame_id: "robot3/base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "robot3/scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "robot3/base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15

loopback_simulator:
  ros__parameters:
    base_frame_id: "robot3/base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "robot3/base_scan"  # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02
